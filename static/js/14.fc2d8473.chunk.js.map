{"version":3,"sources":["shared/components/ColoredButton.js","shared/components/Dropzone.js"],"names":["memo","props","color","children","theme","buttonTheme","createTheme","adaptV4Theme","_objectSpread","palette","primary","main","buttonProps","_ref","_objectWithoutProperties","React","createElement","StyledEngineProvider","injectFirst","ThemeProvider","Button","Object","assign","__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dropzone__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","_mui_material__WEBPACK_IMPORTED_MODULE_3__","_mui_styles_withStyles__WEBPACK_IMPORTED_MODULE_4__","_ColoredButton__WEBPACK_IMPORTED_MODULE_5__","getColor","isDragAccept","isDragReject","success","error","dark","common","black","withStyles","button","borderWidth","borderColor","borderTopLeftRadius","borderBottomLeftRadius","fullHeight","height","withTheme","onDrop","accept","classes","style","_useDropzone","useDropzone","getRootProps","getInputProps","Box","ColoredButton","fullWidth","className","classNames","variant"],"mappings":"6KA8BeA,mBA1Bf,SAAuBC,GAAO,IACpBC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACnBC,EAAcC,YAAYC,YAAYC,YAAA,GACvCJ,EAAK,CACRK,QAAS,CACPC,QAAS,CACPC,KAAMT,QAINU,GAAeC,EAAyCZ,EAAjCY,EAALX,MAAYW,EAALT,MAAeS,EAARV,SAAcW,YAAAD,EAAA,+BAA/B,IAAAA,EACrB,OACEE,IAAAC,cAACC,IAAoB,CAACC,aAAW,GAC/BH,IAAAC,cAACG,IAAa,CAACf,MAAOC,GACpBU,IAAAC,cAACI,IAAMC,OAAAC,OAAA,GAAKV,EAAW,CAAEV,MAAM,YAC5BC,yCCnBXoB,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAAK,EAAAE,GAAAE,EAAAT,EAAA,KAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,KAoBA,SAASY,EAASC,EAAcC,EAAcjC,GAC5C,OAAIgC,EACKhC,EAAMK,QAAQ6B,QAAQ3B,KAE3B0B,EACKjC,EAAMK,QAAQ8B,MAAMC,KAEtBpC,EAAMK,QAAQgC,OAAOC,MA2CfC,sBA9DA,CACbC,OAAQ,CACNC,YAAa,EACbC,YAAa,sBACbC,oBAAqB,EACrBC,uBAAwB,GAE1BC,WAAY,CACVC,OAAQ,SAsDsB,CAAEC,WAAW,GAAhCR,CAxCf,SAAkB1C,GAAO,IACfmD,EAAgEnD,EAAhEmD,OAAQC,EAAwDpD,EAAxDoD,OAAQJ,EAAgDhD,EAAhDgD,WAAY9C,EAAoCF,EAApCE,SAAUmD,EAA0BrD,EAA1BqD,QAASC,EAAiBtD,EAAjBsD,MAAOnD,EAAUH,EAAVG,MAAKoD,EAM/DC,YAAY,CACdJ,OAAQA,EACRD,OAAQA,IANRM,EAAYF,EAAZE,aACAC,EAAaH,EAAbG,cACAvB,EAAYoB,EAAZpB,aACAC,EAAYmB,EAAZnB,aAKF,OACEtB,IAAAC,cAAC4C,IAAGvC,OAAAC,OAAA,GAAKoC,IAAc,CAAER,OAAO,SAC9BnC,IAAAC,cAAA,QAAW2C,KACX5C,IAAAC,cAAC6C,IAAa,CACZC,WAAS,EACTC,UAAWC,IACTf,EAAaK,EAAQL,WAAa,KAClCK,EAAQV,QAEVqB,QAAQ,WACR/D,MAAOiC,EAASC,EAAcC,EAAcjC,GAC5CmD,MAAOA,GAENpD","file":"static/js/14.fc2d8473.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, createTheme, ThemeProvider, StyledEngineProvider, adaptV4Theme } from \"@mui/material\";\r\n\r\nfunction ColoredButton(props) {\r\n  const { color, children, theme } = props;\r\n  const buttonTheme = createTheme(adaptV4Theme({\r\n    ...theme,\r\n    palette: {\r\n      primary: {\r\n        main: color\r\n      }\r\n    }\r\n  }));\r\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <ThemeProvider theme={buttonTheme}>\r\n        <Button {...buttonProps} color=\"primary\">\r\n          {children}\r\n        </Button>\r\n      </ThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n}\r\n\r\nColoredButton.propTypes = {\r\n  color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default memo(ColoredButton);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport classNames from \"classnames\";\r\nimport { Box } from \"@mui/material\";\r\nimport withStyles from '@mui/styles/withStyles';\r\nimport ColoredButton from \"./ColoredButton\";\r\n\r\nconst styles = {\r\n  button: {\r\n    borderWidth: 1,\r\n    borderColor: \"rgba(0, 0, 0, 0.23)\",\r\n    borderTopLeftRadius: 0,\r\n    borderBottomLeftRadius: 0\r\n  },\r\n  fullHeight: {\r\n    height: \"100%\"\r\n  }\r\n};\r\n\r\nfunction getColor(isDragAccept, isDragReject, theme) {\r\n  if (isDragAccept) {\r\n    return theme.palette.success.main;\r\n  }\r\n  if (isDragReject) {\r\n    return theme.palette.error.dark;\r\n  }\r\n  return theme.palette.common.black;\r\n}\r\n\r\nfunction Dropzone(props) {\r\n  const { onDrop, accept, fullHeight, children, classes, style, theme } = props;\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragAccept,\r\n    isDragReject\r\n  } = useDropzone({\r\n    accept: accept,\r\n    onDrop: onDrop\r\n  });\r\n  return (\r\n    <Box {...getRootProps()} height=\"100%\">\r\n      <input {...getInputProps()} />\r\n      <ColoredButton\r\n        fullWidth\r\n        className={classNames(\r\n          fullHeight ? classes.fullHeight : null,\r\n          classes.button\r\n        )}\r\n        variant=\"outlined\"\r\n        color={getColor(isDragAccept, isDragReject, theme)}\r\n        style={style}\r\n      >\r\n        {children}\r\n      </ColoredButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nDropzone.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n  onDrop: PropTypes.func,\r\n  accept: PropTypes.string,\r\n  fullHeight: PropTypes.bool,\r\n  style: PropTypes.object,\r\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(Dropzone);\r\n"],"sourceRoot":""}